#!/usr/bin/env bash

set -eou pipefail

# fix segmentation fault reported in https://github.com/k2-fsa/icefall/issues/674
export PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python

. path.sh || exit 1;

nj=6
stage=-1
stop_stage=4


# We assume dl_dir (download dir) contains the following
# directories and files. If not, they will be downloaded
# by this script automatically.
#
#  - $dl_dir/aishell
#      You can download aishell from https://www.openslr.org/33/
#

dl_dir=$PWD/download

dataset_parts="train dev test"  # debug

text_extractor="pypinyin_initials_finals"
audio_extractor="Encodec"  # or Fbank
audio_feats_dir=data/tokenized

. shared/parse_options.sh || exit 1


# All files generated by this script are saved in "data".
# You can safely remove "data" and rerun this script to regenerate it.
mkdir -p data

log() {
  # This function is from espnet
  local fname=${BASH_SOURCE[1]##*/}
  echo -e "$(date '+%Y-%m-%d %H:%M:%S') (${fname}:${BASH_LINENO[0]}:${FUNCNAME[1]}) $*"
}

log "start $stage stop $stop_stage"

if [ $stage -le 0 ] && [ $stop_stage -ge 0 ]; then
  log "dl_dir: $dl_dir"
  log "Stage 0: Download data"

  # If you have pre-downloaded it to /path/to/bznsyp,
  # you can create a symlink
  #
  #   ln -sfv /path/to/bznsyp $dl_dir/BZNSYP
  if [ ! -d $dl_dir/BZNSYP ];then
    lhotse download baker-zh $dl_dir
  fi
fi

if [ $stage -le 1 ] && [ $stop_stage -ge 1 ]; then
  log "Stage 1: Prepare bznsyp manifest"
  # We assume that you have downloaded the bznsyp corpus
  # to $dl_dir/BZNSYP
  mkdir -p data/manifests
  if [ ! -e data/manifests/.bznsyp.done ]; then
    lhotse prepare baker-zh $dl_dir/BZNSYP data/manifests
    touch data/manifests/.bznsyp.done
  fi
fi

if [ $stage -le 2 ] && [ $stop_stage -ge 2 ]; then
  log "Stage 2: Prepare bznsyp train/dev/test"
  # 10000 = train/dev/test = 9500/450/50
  if [ ! -e data/manifests/baker_zh_recordings_test.jsonl.gz ]; then
    for manifest in "recordings" "supervisions";do
      lhotse subset --last 500 data/manifests/baker_zh_${manifest}_all.jsonl.gz \
        data/manifests/baker_zh_${manifest}_dev_test.jsonl.gz || exit 1
      lhotse subset --last 50 data/manifests/baker_zh_${manifest}_dev_test.jsonl.gz \
        data/manifests/baker_zh_${manifest}_test.jsonl.gz || exit 1
      lhotse subset --first 450 data/manifests/baker_zh_${manifest}_dev_test.jsonl.gz \
        data/manifests/baker_zh_${manifest}_dev.jsonl.gz || exit 1

      lhotse subset --first 9500 data/manifests/baker_zh_${manifest}_all.jsonl.gz \
        data/manifests/baker_zh_${manifest}_train.jsonl.gz || exit 1

      rm -f data/manifests/baker_zh_${manifest}_dev_test.jsonl.gz
    done
  fi
fi

if [ $stage -le 3 ] && [ $stop_stage -ge 3 ]; then
  log "Stage 2: Tokenize/Fbank bznsyp"
  mkdir -p ${audio_feats_dir}
  if [ ! -e ${audio_feats_dir}/.bznsyp.tokenize.done ]; then
    python3 bin/tokenizer.py --dataset-parts "${dataset_parts}" \
        --text-extractor ${text_extractor} \
        --audio-extractor ${audio_extractor} \
        --batch-duration 400 \
        --prefix "baker_zh" \
        --src-dir "data/manifests" \
        --output-dir "${audio_feats_dir}"
  fi
  touch ${audio_feats_dir}/.bznsyp.tokenize.done

  cd ${audio_feats_dir}
  ln -sf  egs/bznsyp/data/tokenized/baker_zh_cuts_train.jsonl.gz cuts_train.jsonl.gz
  ln -sf  egs/bznsyp/data/tokenized/baker_zh_cuts_dev.jsonl.gz cuts_dev.jsonl.gz
  ln -sf  egs/bznsyp/data/tokenized/baker_zh_cuts_test.jsonl.gz cuts_test.jsonl.gz
fi

python3 ./bin/display_manifest_statistics.py --manifest-dir ${audio_feats_dir}
